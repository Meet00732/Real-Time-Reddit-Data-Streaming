AWSTemplateFormatVersion: "2010-09-09"
Description: "Networking stack for Reddit project"


Parameters:
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access"
    Type: AWS::EC2::KeyPair::KeyName

  VPCId:
    Description: "VPC ID from Networking Stack"
    Type: AWS::EC2::VPC::Id

  PublicSubnetId:
    Description: "Public Subnet ID from Networking Stack"
    Type: AWS::EC2::Subnet::Id

  GitRepoURL:
    Description: "Git repository URL for your application (docker-compose file)"
    Type: String
    Default: "https://github.com/Meet00732/Real-Time-Reddit-Data-Streaming.git"

  BucketNameParam:
    Type: AWS::SSM::Parameter::Value<String>
    Default: redditstream-BUCKET_NAME
    Description: "SSM path for our S3 bucket name"


Mappings:
  RegionMap:
    us-east-1:
      AMI: "ami-0c2b8ca1dad447f8a"

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for EC2 instance running Docker Compose"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 9021
          ToPort: 9021
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: 0.0.0.0/0
        
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: Reddit-EC2SecurityGroup

  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3WritePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Buckets
                Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${BucketNameParam}"
              - Sid: Objects
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:AbortMultipartUpload
                  - s3:ListMultipartUploadParts
                Resource: !Sub "arn:aws:s3:::${BucketNameParam}/*"


  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2IAMRole


  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.large
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SubnetId: !Ref PublicSubnetId
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: Reddit-EC2Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          # Install docker and start the service
          amazon-linux-extras install docker -y
          service docker start
          usermod -a -G docker ec2-user

          # Create a 2GB swap file to provide extra virtual memory
          fallocate -l 2G /swapfile
          chmod 600 /swapfile
          mkswap /swapfile
          swapon /swapfile
          echo "/swapfile none swap sw 0 0" >> /etc/fstab

          # Install docker-compose
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Install git and python3 (which includes pip)
          yum install -y git
          yum install -y python3

          cd /home/ec2-user
          git clone -b EDS/adding-kafka-docker-compose ${GitRepoURL} app
          cd app

          # Upgrade pip and install required python packages
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

          # Start your application with docker-compose
          # docker-compose up -d
      
Outputs:
  InstanceId:
    Description: "EC2 Instance ID"
    Value: !Ref EC2Instance

  InstancePublicIP:
    Description: "Public IP of the EC2 Instance"
    Value: !GetAtt EC2Instance.PublicIp
